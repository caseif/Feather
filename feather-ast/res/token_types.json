{
  "token_types": [
    {
      "id": "StringLiteral",
      "regex": "\"((?:[^\"\\\n]|\\.)*)\""
    },
    {
      "id": "Newline",
      "regex": "\\n"
    },
    {
      "id": "DecimalLiteral",
      "regex": "(\\d+\\.\\d+)"
    },
    {
      "id": "IntegerLiteral",
      "regex": "(\\d+)"
    },
    {
      "id": "HexLiteral",
      "regex": "(0x[0-9A-Fa-f]+)"
    },
    {
      "id": "TrueLiteral",
      "regex": "true"
    },
    {
      "id": "FalseLiteral",
      "regex": "false"
    },
    {
      "id": "Import",
      "regex": "import"
    },
    {
      "id": "ClassDefKeyword",
      "regex": "class"
    },
    {
      "id": "FunctionDefKeyword",
      "regex": "fn"
    },
    {
      "id": "VarDeclKeyword",
      "regex": "let"
    },
    {
      "id": "ConstQualifier",
      "regex": "const\\b"
    },
    {
      "id": "ElseIf",
      "regex": "else if"
    },
    {
      "id": "If",
      "regex": "if"
    },
    {
      "id": "Else",
      "regex": "else"
    },
    {
      "id": "For",
      "regex": "for"
    },
    {
      "id": "While",
      "regex": "while"
    },
    {
      "id": "Break",
      "regex": "break"
    },
    {
      "id": "Continue",
      "regex": "continue"
    },
    {
      "id": "Return",
      "regex": "return"
    },
    {
      "id": "Nil",
      "regex": "nil"
    },
    {
      "id": "Range",
      "regex": "\\.\\."
    },
    {
      "id": "RangeInclusive",
      "regex": "\\.\\.="
    },
    {
      "id": "OpenParen",
      "regex": "\\("
    },
    {
      "id": "CloseParen",
      "regex": "\\)"
    },
    {
      "id": "OpenBrace",
      "regex": "\\{"
    },
    {
      "id": "CloseBrace",
      "regex": "}"
    },
    {
      "id": "AnnotationBegin",
      "regex": "\\[\\["
    },
    {
      "id": "AnnotationEnd",
      "regex": "]]"
    },
    {
      "id": "OpenBracket",
      "regex": "\\["
    },
    {
      "id": "CloseBracket",
      "regex": "]"
    },
    {
      "id": "StaticAccessor",
      "regex": "::"
    },
    {
      "id": "InstanceAccessor",
      "regex": "\\."
    },
    {
      "id": "Comma",
      "regex": ","
    },
    {
      "id": "RightArrow",
      "regex": "->"
    },
    {
      "id": "Colon",
      "regex": ":"
    },
    {
      "id": "Equals",
      "regex": "=="
    },
    {
      "id": "NotEquals",
      "regex": "!="
    },
    {
      "id": "LessThan",
      "regex": "<"
    },
    {
      "id": "LessEqual",
      "regex": "<="
    },
    {
      "id": "GreaterThan",
      "regex": ">"
    },
    {
      "id": "GreaterEqual",
      "regex": ">="
    },
    {
      "id": "And",
      "regex": "&&"
    },
    {
      "id": "Or",
      "regex": "\\|\\|"
    },
    {
      "id": "Not",
      "regex": "!"
    },
    {
      "id": "Assign",
      "regex": "="
    },
    {
      "id": "PlusAssign",
      "regex": "\\+="
    },
    {
      "id": "MinusAssign",
      "regex": "-="
    },
    {
      "id": "MultiplyAssign",
      "regex": "\\*="
    },
    {
      "id": "DivideAssign",
      "regex": "/="
    },
    {
      "id": "Plus",
      "regex": "\\+"
    },
    {
      "id": "Hyphen",
      "regex": "-"
    },
    {
      "id": "Asterisk",
      "regex": "\\*"
    },
    {
      "id": "ForwardSlash",
      "regex": "/"
    },

    {
      "id": "Percent",
      "regex": "/"
    },
    {
      "id": "TypeInt8",
      "regex": "i8"
    },
    {
      "id": "TypeInt16",
      "regex": "i16"
    },
    {
      "id": "TypeInt32",
      "regex": "i32"
    },
    {
      "id": "TypeInt64",
      "regex": "i64"
    },
    {
      "id": "TypeUint8",
      "regex": "u8"
    },
    {
      "id": "TypeUint16",
      "regex": "u16"
    },
    {
      "id": "TypeUint32",
      "regex": "u32"
    },
    {
      "id": "TypeUint64",
      "regex": "u64"
    },
    {
      "id": "TypeFloat8",
      "regex": "i8"
    },
    {
      "id": "TypeFloat16",
      "regex": "i16"
    },
    {
      "id": "TypeFloat32",
      "regex": "i32"
    },
    {
      "id": "TypeFloat64",
      "regex": "i64"
    },
    {
      "id": "TypeBool",
      "regex": "bool"
    },
    {
      "id": "TypeChar",
      "regex": "char"
    },
    {
      "id": "TypeString",
      "regex": "string"
    },
    {
      "id": "Identifier",
      "regex": "([A-Za-z0-9_]+)"
    }
  ]
}
